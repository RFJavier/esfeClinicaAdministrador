@page "/Paciente/agregar"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Agregar Nuevo Paciente</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="paciente" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>

                        <MudSelect Variant="Variant.Outlined" Label="Medico" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="paciente.IdMedico" For="@(() => paciente.IdMedico)">
                            @foreach(var item in med){
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect Variant="Variant.Outlined" Label="Examen" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="paciente.IdExamen" For="@(() => paciente.IdExamen)">
                            @foreach (var item in exam)
                            {
                                <MudSelectItem Value="@item.Id">@item.Examen</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Variant="Variant.Outlined" Label="Anexo" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="paciente.IdAnexo" For="@(() => paciente.IdAnexo)">
                            @foreach (var item in anex)
                            {
                                <MudSelectItem Value="@item.Id">@item.Anexo</MudSelectItem>
                            }
                        </MudSelect>

                        <MudTextField Label="Nombre" @bind-Value="paciente.Nombre" For="@(() => paciente.Nombre)" />
                        <MudTextField Label="Edad" @bind-Value="paciente.Edad" For="@(() => paciente.Edad)" />
                        <MudTextField Label="Telefono" @bind-Value="paciente.Telefono" For="@(() => paciente.Telefono)" />
                        <MudTextField Label="Feacha de nacimiento" @bind-Value="paciente.FechaNacimiento" For="@(() => paciente.FechaNacimiento)" />
                        <MudTextField Label="Genero" @bind-Value="paciente.Genero" For="@(() => paciente.Genero)" />

                                         
                        
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Guardar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<Anexos> anex = new List<Anexos>();
    private IEnumerable<Medico> med = new List<Medico>();
    private IEnumerable<Examenes> exam = new List<Examenes>();
    private bool showLeaveAlert = false;
   Paciente paciente = new Paciente();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
    }

    

    private async Task OnValidSubmit(EditContext context)
    {
        await save();
    }

    private async Task save()
    {
        var httpResponse = await Http.PostAsJsonAsync<Paciente>("Paciente", paciente);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("Paciente/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getAll(){
        var httpResponse = await Http.GetStringAsync("Medicos");
        var httpResponse2 = await Http.GetStringAsync("Anexos");
        var httpResponse3 = await Http.GetStringAsync("Examenes");
        med = JsonSerializer.Deserialize<IEnumerable<Medico>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        anex = JsonSerializer.Deserialize<IEnumerable<Anexos>>(httpResponse2, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        exam = JsonSerializer.Deserialize<IEnumerable<Examenes>>(httpResponse3, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    //private async Task getAnexo()
    //{
    //    var httpResponse = await Http.GetStringAsync("Anexos");
    //    anex = JsonSerializer.Deserialize<IEnumerable<Anexos>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    //}

    //private async Task getExamen()
    //{
    //    var httpResponse = await Http.GetStringAsync("Examenes");
    //    exam = JsonSerializer.Deserialize<IEnumerable<Examenes>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    //}
}
